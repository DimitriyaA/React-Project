import { useEffect, useState } from "react";
import { useAuthContext } from "../../contexts/AuthContext";
import { db } from "../../firebase/firebaseConfig";
import { collection, getDocs, query, where } from "firebase/firestore";
import { Link } from "react-router-dom";

const ProfilePage = () => {
    const { user } = useAuthContext();
    const [items, setItems] = useState([]);
    const [spells, setSpells] = useState([]);
    const [locations, setLocations] = useState([]);

    useEffect(() => {
        if (!user) return;

        const fetchUserData = async () => {
            try {
                console.log("–õ–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª: ", user.uid);

                // –ó–∞–ø–∏—Ç–≤–∞–Ω–µ –∑–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏ —Å UID –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                const itemsQuery = query(collection(db, "magicItems"), where("createdBy", "==", user.uid));
                const itemsSnapshot = await getDocs(itemsQuery);
                setItems(itemsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));

                // –ó–∞–ø–∏—Ç–≤–∞–Ω–µ –∑–∞ –º–∞–≥–∏–∏—Ç–µ —Å –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                const spellsQuery = query(collection(db, "spells"), where("createdBy", "==", user.displayName));
                const spellsSnapshot = await getDocs(spellsQuery);
                setSpells(spellsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));

                // –ó–∞–ø–∏—Ç–≤–∞–Ω–µ –∑–∞ –ª–æ–∫–∞—Ü–∏–∏—Ç–µ —Å –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
                const locationsQuery = query(collection(db, "locations"), where("createdBy", "==", user.displayName));
                const locationsSnapshot = await getDocs(locationsQuery);
                setLocations(locationsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
            } catch (error) {
                console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ.", error);
            }
        };

        fetchUserData();
    }, [user]);

    if (!user) {
        return <p className="text-center text-gray-400">üîí –¢—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –∑–∞ –¥–∞ –≤–∏–∂–¥–∞—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.</p>;
    }

    return (
        <div className="profile-container">
            <h1>üîÆ –ü—Ä–æ—Ñ–∏–ª—ä—Ç –Ω–∞ {user.displayName || user.email}</h1>

            <section className="profile-section">
                <h2>üßô‚Äç‚ôÇÔ∏è –ú–æ–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∏</h2>
                {items.length > 0 ? (
                    <ul>
                        {items.map(item => (
                            <li key={item.id}>
                                <span>{item.name}</span>
                                <Link to={`/item/${item.id}`} className="ml-4">–í–∏–∂ –¥–µ—Ç–∞–π–ª–∏</Link>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –º–∞–≥–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∏.</p>
                )}
            </section>

            <section className="profile-section">
                <h2>üìú –ú–æ–∏—Ç–µ –º–∞–≥–∏–∏</h2>
                {spells.length > 0 ? (
                    <ul>{spells.map(spell => <li key={spell.id}>{spell.name}</li>)}</ul>
                ) : (
                    <p>–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –º–∞–≥–∏–∏.</p>
                )}
            </section>

            <section className="profile-section">
                <h2>üìç –ú–æ–∏—Ç–µ –º–∞–≥—å–æ—Å–Ω–∏—á–µ—Å–∫–∏ –ª–æ–∫–∞—Ü–∏–∏</h2>
                {locations.length > 0 ? (
                    <ul>{locations.map(loc => (
                        <li key={loc.id}>{loc.name}</li>
                    ))}</ul>
                ) : (
                    <p>–ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –º–∞–≥—å–æ—Å–Ω–∏—á–µ—Å–∫–∏ –ª–æ–∫–∞—Ü–∏–∏.</p>
                )}
            </section>
        </div>
    );
};

export default ProfilePage;
